{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","state","squares","Array","fill","xIsNext","i","this","renderSquare","React","Component","Game","history","stepNumber","step","setState","slice","length","calculateWinner","concat","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"kMAIA,SAASA,EAAOC,GAGZ,OACI,4BAAQC,UAAU,SACdC,QAAS,WACLF,EAAME,YAETF,EAAMG,O,IAMbC,E,YACF,WAAYJ,GAAQ,IAAD,8BACf,4CAAMA,KACDK,MAAQ,CAAEC,QAASC,MAAM,GAAGC,KAAK,MAAOC,SAAS,GAFvC,E,0EAINC,GAAI,IAAD,OACZ,OAAO,kBAACX,EAAD,CAAQI,MAAOQ,KAAKX,MAAMM,QAAQI,GAAIR,QAAS,WAAQ,EAAKF,MAAME,QAAQQ,Q,+BAKjF,OACI,6BAEI,yBAAKT,UAAU,aACVU,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,IAEvB,yBAAKX,UAAU,aACVU,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,IAEvB,yBAAKX,UAAU,aACVU,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,S,GA3BnBC,IAAMC,WAkCpBC,E,YACF,WAAYf,GAAQ,IAAD,8BACf,4CAAMA,KACDK,MAAQ,CAAEW,QAAS,CAAC,CAAEV,QAASC,MAAM,GAAGC,KAAK,QAClDC,SAAS,EAAMQ,WAAY,GAHZ,E,oEAOZC,GACHP,KAAKQ,SAAS,CACZF,WAAYC,EACZT,QAAUS,EAAO,IAAO,M,kCAIlBR,GACR,IAAMM,EAAUL,KAAKN,MAAMW,QAAQI,MAAM,EAAGT,KAAKN,MAAMY,WAAa,GAE9DX,EADUU,EAAQA,EAAQK,OAAS,GACjBf,QAAQc,QAC5BE,EAAgBhB,IAAYA,EAAQI,KAIxCJ,EAAQI,GAAKC,KAAKN,MAAMI,QAAU,IAAM,IACxCE,KAAKQ,SAAS,CACVH,QAASA,EAAQO,OAAO,CAAC,CACrBjB,QAASA,KAEbW,WAAYD,EAAQK,OACpBZ,SAAUE,KAAKN,MAAMI,a,+BAInB,IAiBFe,EAjBC,OACCR,EAAUL,KAAKN,MAAMW,QACrBS,EAAUT,EAAQL,KAAKN,MAAMY,YAC7BS,EAASJ,EAAgBG,EAAQnB,SAEjCqB,EAAQX,EAAQY,KAAI,SAACV,EAAMW,GAC7B,IAAMC,EAAOD,EACT,eAAiBA,EACjB,mBACJ,OACI,wBAAIE,IAAKF,GACL,4BAAQ3B,QAAS,kBAAM,EAAK8B,OAAOH,KAAQC,OAYvD,OAJIN,EADAE,EACS,WAAaA,EAEb,iBAAmBf,KAAKN,MAAMI,QAAU,IAAM,KAGvD,yBAAKR,UAAU,QACX,yBAAKA,UAAU,cACX,kBAACG,EAAD,CAAOE,QAASmB,EAAQnB,QAASJ,QAAS,SAACQ,GAAQ,EAAKuB,YAAYvB,OAExE,yBAAKT,UAAU,aACX,6BAAMuB,GACN,4BAAKG,S,GA/DNd,IAAMC,WAsEzB,SAASQ,EAAgBhB,GAWrB,IAVA,IAAM4B,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFxB,EAAI,EAAGA,EAAIwB,EAAMb,OAAQX,IAAK,CAAC,IAAD,cACjBwB,EAAMxB,GADW,GAC5ByB,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAI/B,EAAQ6B,IAAM7B,EAAQ6B,KAAO7B,EAAQ8B,IAAM9B,EAAQ6B,KAAO7B,EAAQ+B,GAClE,OAAO/B,EAAQ6B,GAGvB,OAAO,KAKXG,IAASC,OACL,kBAACxB,EAAD,MACAyB,SAASC,eAAe,U","file":"static/js/main.47209282.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\"\n\nfunction Square(props) {\n\n\n    return (\n        <button className=\"square\"\n            onClick={() => {\n                props.onClick();\n            }}>\n            {props.value}\n        </button>\n    );\n}\n\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { squares: Array(9).fill(null), xIsNext: true };\n    }\n    renderSquare(i) {\n        return <Square value={this.props.squares[i]} onClick={() => { this.props.onClick(i) }} />;\n    }\n\n    render() {\n\n        return (\n            <div>\n\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { history: [{ squares: Array(9).fill(null) }],\n        xIsNext: true, stepNumber: 0 };\n    }\n\n\n    jumpTo(step) {\n        this.setState({\n          stepNumber: step,\n          xIsNext: (step % 2) === 0,\n        });\n      }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        //comentario\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        const moves = history.map((step, move) => {\n            const desc = move ?\n                'Go to move #' + move :\n                'Go to game start';\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n        });\n\n\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner;\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board squares={current.squares} onClick={(i) => { this.handleClick(i) }} />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}